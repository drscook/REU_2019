{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"m4390 Ising Model & Glauber dynamics","version":"0.3.2","provenance":[{"file_id":"196VVSoVWzMlvh35lh0vZfI6qQda9ZiHh","timestamp":1554738902902},{"file_id":"1cCZwNjSNq2DmPgnYKSDSIo1nGT-uMJg2","timestamp":1553275281599},{"file_id":"1yBTwy4dimbxUaLIyTW9Q5lD6NFyHEFHe","timestamp":1552506133682},{"file_id":"1IOI_uwT7gktGdAGiYqz2BqLOGOnZwVv_","timestamp":1552188874641}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"Ii1WSQ199TR6","colab_type":"text"},"cell_type":"markdown","source":["Math 4390 Spring 2019 - The Ising Model & Glauber Dynamics\n","\n","Runtime -> Change runtime type -> Python 3 & GPU"]},{"metadata":{"id":"wdtA0SJzpWRY","colab_type":"text"},"cell_type":"markdown","source":["The Ising Model https://en.wikipedia.org/wiki/Ising_model is a (simplified) physical model of how magnets arrange themselves.  It starts with a graph - we will use a simple square lattice in this code.  A magnet sits at each vertex with either north pole up or north pole down.  We will call them +1 and -1 respectively.  It is energetically favorable for adjacent magnets to align.\n","\n","Mathematically, this is simply a \"coloring\" of the vertices of the graph using 2 colors (called -1 and +1) where we prefer adjacent vertices to have the same color.  So $\\Omega = \\{-1,+1\\}^N$.  The internal energy of $\\sigma \\in \\Omega$ is given by\n","$$E(\\sigma) = e^{-\\beta H(\\sigma)}$$\n","where\n","$$H(\\sigma) = -\\sum_{x \\sim y} \\sigma(x)\\sigma(y)$$ where $x \\sim y$ means $v$ and $w$ are adjacent vertices.  $H$ is called the *Hamiltonian*.\n","\n","\n","The Glauber dynamics (also called the Gibb's sampler) is another widely-used MCMC method which was applied which great success to the Ising Model by Roy Glauber.  It uses $E$ as the objective function in a guided random walk that is a little different than Metropolis Hastings.\n","\n","- Pick a vertex $x$ uniformly at random\n","- Compute the energy for EVERY allowed value.\n","- Turn these energies into a probability distribution by diving by the sum.\n","- Select the value to put at $x$ from this distribution.\n","\n","The differences btw MH and Gibbs Sampler is easier to see if there were more than 2 color options.  Say there were $k$ colors and we modified the Hamiltonian accordingly.  Then:\n","\n","MH - Pick one vertex and one new color.  Decide whether to reject or accept.  We only consider ONE possible move.\n","\n","Gibbs - Pick one vertex and consider ALL possible colors.  Choose which color based on their relative energies.  It is possible to pick the same color that was already there, which is equivalent to \"reject\" in MH.  But there is a different rejection probability.\n","\n","Pro for Gibbs - Suppose there is a specific color that would be very favorable for vertex $x$.  MH has probability $1/k$ of proposing it, and prob $1-1/k$ of missing it entirely.  That's not great.  But Gibbs will definitely see it and will select it with high probability.\n","\n","Con for Gibbs - You must apply the objective function to all the neighbors.  This can be slow if the function is expensive or if there are a lot of neighbors.\n","\n","#### Role of $\\beta$\n","\n","Physically $\\beta = 1/\\kappa T$, where $T$ is temperature and $\\kappa$ is the Boltzmann constant.  Small $\\beta$ = high temperature.\n","\n","At high temperature, the effect of the internal energy $E$ is dwarfed by the thermal energy.  As a result, all configurations are basically equally likely.\n","\n","But at low temperature, internal energy is much more important.  The configurations with slightly different $E$ may have very different probabilities of occuring.\n","\n","We see this in the \"clumping\" for large $\\beta$ but uniformity for small $\\beta$.\n","\n","In MCMC, we use $\\beta$ to do *simulated annealing*.  At first, we want to run as fast as possible through the space.  We don't care about small differences in the objective function - we care only about great big differences.  So we start with small $\\beta$.  As time goes on, we want to get more picky.  So we raise $\\beta$.\n","\n","BTW - we can get $\\beta$ in MH too.  Rather than \n","\n","acceptance ratio = $f(new)/f(old)$\n","\n","we can use \n","\n","acceptance ratio = $e^{\\beta f(new)}/e^{\\beta f(old)}$\n","\n","\n","http://bit-player.org/2019/glaubers-dynamics\n","\n","http://mae.engr.ucdavis.edu/dsouza/Talks/msri-June06.pdf\n","\n","http://farside.ph.utexas.edu/teaching/329/lectures/node110.html"]},{"metadata":{"id":"4pgIPz_1sFMM","colab_type":"code","outputId":"81c01b68-1d43-4007-d370-151602fe79ab","executionInfo":{"status":"ok","timestamp":1554932386959,"user_tz":300,"elapsed":9677,"user":{"displayName":"Scott Cook","photoUrl":"https://lh5.googleusercontent.com/-ZkIlvXwQShA/AAAAAAAAAAI/AAAAAAAAho0/xbglAnbatbk/s64/photo.jpg","userId":"11382026748249358795"}},"colab":{"base_uri":"https://localhost:8080/","height":344}},"cell_type":"code","source":["import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib.cm as cm\n","import seaborn as sns\n","import pandas as pd\n","import itertools as it\n","np.random.RandomState(42)\n","\n","\n","beta = 0.3\n","iterations = 100000\n","\n","## Vertices\n","dim = 2\n","side_length = 50\n","\n","W = it.product(range(side_length), repeat=dim)\n","Verts = np.array(list(W))\n","N = len(Verts)\n","\n","## Adjacency matrix - adjacent if the L^1 distance = 1 (differ by +-1 in exactly 1 slot)\n","W0 = np.expand_dims(Verts, 0)  # shape (1, N, dim)\n","W1 = np.expand_dims(Verts, 1)  # shape (N, 1, dim)\n","E = np.abs(W0 - W1)            # shape (N, N, dim)\n","L1_dist = E.sum(axis=-1)       # shape (N, N)\n","Adj = (L1_dist == 1)           # shape (N, N)\n","\n","\n","\n","def objective_function(Spins, x=None):\n","    if x is None:  # Compute energy of entire configuration\n","        S = np.outer(Spins, Spins)     # shape (N, N) ... S[i,j] = Spins[i]*Spins[j]\n","        S *= Adj                       # shape (N, N) ... set = 0  if i,j are not adjacent\n","        H = np.sum(S)\n","    else:          # Compute energy of the neighborhood of v\n","        nbr_idx = Adj[x]\n","        nbr_spins = Spins[nbr_idx].copy()\n","        nbr_spins *= Spins[x]\n","        H = np.sum(nbr_spins)\n","    return np.exp(beta * H)\n","\n","\n","levels = [-1, 1]\n","Spins = np.random.choice(levels, size = N)\n","obj = np.zeros(len(levels))\n","\n","for step in range(int(iterations)):\n","    x = np.random.randint(N)\n","    \n","    for i, lev in enumerate(levels):\n","        Spins[x] = lev\n","        obj[i] = objective_function(Spins, x)\n","\n","    probs = obj / obj.sum()\n","    lev = np.random.choice(levels, p = probs)\n","    Spins[x] = lev\n","\n","    \n","data = pd.DataFrame(data={'x':Verts[:,0], 'y':Verts[:,1], 'z':Spins})\n","data = data.pivot(index='x', columns='y', values='z')\n","sns.heatmap(data, xticklabels=False, yticklabels=False)\n","plt.show()"],"execution_count":4,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 576x396 with 2 Axes>"]},"metadata":{"tags":[]}}]}]}